{"meta":{"title":"Marco Cai's Tech Blog","subtitle":null,"description":null,"author":"Mingxiang Cai","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-03-09T07:43:51.000Z","updated":"2018-03-10T23:49:20.583Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"mogodb note","slug":"mogodb-note","date":"2018-03-09T22:04:39.000Z","updated":"2018-03-12T02:18:17.575Z","comments":true,"path":"2018/03/09/mogodb-note/","link":"","permalink":"http://yoursite.com/2018/03/09/mogodb-note/","excerpt":"start# run in the background mongod # open interactive shell mongo # in python from pymongo import MongoClient Client = MongoClient() db = Client[dbname]","text":"start# run in the background mongod # open interactive shell mongo # in python from pymongo import MongoClient Client = MongoClient() db = Client[dbname] database# basic show dbs show tables/collection db use db_name # delete current database db.dropDatabase() collection# create collection db.createCollection(&quot;col_name&quot;) # create fixed collection with space 6142800 KB, documents &lt; 10000 db.createCollection(&quot;col_name&quot;, { capped : true, autoIndexId : true, size : 6142800, max : 10000 } ) # delete collection db.collection.drop() documents# insert documents (collection auto created if not exiested) db.collection.insertOne({&quot;a&quot;: 3}) db.collection.insert({&quot;name&quot;:&quot;MarcoCai&quot;}) # insert document indirectly document = {...} db.collection.insert(document) # inset multiple db.collection.insertMany([{&quot;b&quot;: 3}, {&#39;c&#39;: 4}]) # find documents under a collection db.collection.find() db.collection.find().pretty() db.col.find({key1:value1, key2:value2}).pretty() db.col.find( {$or: [ {key1: value1}, {key2:value2} ] }).pretty() db.col.find({&quot;likes&quot;: {$gt:50}, $or: [{&quot;by&quot;: &quot;菜鸟教程&quot;},{&quot;title&quot;: &quot;MongoDB 教程&quot;}]}).pretty() # high level find db.col.find({&quot;title&quot; : {$type : 2}}) db.collection.find(query, {title: 1, by: 1}) // inclusion模式 指定返回的键，不返回其他键 db.collection.find(query, {title: 0, by: 0}) // exclusion模式 指定不返回的键,返回其他键 # update document db.test_collection.updateOne({&quot;name&quot;:&quot;abc&quot;},{$set:{&quot;age&quot;:&quot;28&quot;}}) db.test_collection.updateMany({&quot;age&quot;:{$gt:&quot;10&quot;}},{$set:{&quot;status&quot;:&quot;xyz&quot;}}) # replace document db.collection.save( &lt;document&gt; ) # delete document db.inventory.deleteMany({}) db.inventory.deleteMany({ status : &quot;A&quot; }) db.inventory.deleteOne( { status: &quot;D&quot; } ) symbol$gt -------- greater than &gt; $gte --------- gt equal &gt;= $lt -------- less than &lt; $lte --------- lt equal &lt;= $ne ----------- not equal != $eq -------- equal = ObjectidMongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象。 由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间: var newObject = ObjectId() newObject.getTimestamp() data type数据类型描述String字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。 Integer整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。 Boolean布尔值。用于存储布尔值（真/假）。 Double双精度浮点值。用于存储浮点值。 Min/Max keys将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array用于将数组或列表或多个值存储为一个键。 Timestamp时间戳。记录文档修改或添加的具体时间。 Object用于内嵌文档。 Null用于创建空值。 Symbol符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。Date日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。 Object ID对象 ID。用于创建文档的 ID。 Binary Data二进制数据。用于存储二进制数据。Code代码类型。用于在文档中存储 JavaScript 代码。Regular expression正则表达式类型。用于存储正则表达式。","categories":[],"tags":[{"name":"database","slug":"database","permalink":"http://yoursite.com/tags/database/"},{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"Database Knowledges","slug":"Database-knowledges","date":"2018-03-09T21:30:04.000Z","updated":"2018-03-10T22:21:27.167Z","comments":true,"path":"2018/03/09/Database-knowledges/","link":"","permalink":"http://yoursite.com/2018/03/09/Database-knowledges/","excerpt":"","text":"Useful links: nosql intro： http://www.runoob.com/mongodb/nosql.html Different kinds of databases summaries: https://www.jianshu.com/p/107c6b045245 pymongo: https://zhuanlan.zhihu.com/p/20500518 从MySQL和MongoDB的对比，看SQL与NoSQL的较量– 运维派: http://www.yunweipai.com/archives/23797.html SQL与mongoDB对比及映射: http://blog.csdn.net/leshami/article/details/52692912","categories":[],"tags":[{"name":"database","slug":"database","permalink":"http://yoursite.com/tags/database/"}]},{"title":"Mac command line","slug":"Mac-command-line","date":"2018-03-09T06:24:42.000Z","updated":"2018-03-12T02:16:35.622Z","comments":true,"path":"2018/03/08/Mac-command-line/","link":"","permalink":"http://yoursite.com/2018/03/08/Mac-command-line/","excerpt":"Marking down some commonly used shell command:","text":"Marking down some commonly used shell command: Mac 命令行命令history 显示命令历史列表[Tab] =命令行自动补全↑(Ctrl+p) 显示上一条命令↓(Ctrl+n) 显示下一条命令clear 清除 shell 提示屏幕exit 注销history 显示命令历史reset 刷新 shell 提示屏幕 Mac 命令行编辑快捷键↑(Ctrl+p) 显示上一条命令↓(Ctrl+n) 显示下一条命令!num 执行命令历史列表的第num条命令!! 执行上一条命令!?string? 执行含有string字符串的最新命令Ctrl+r 然后输入若干字符，开始向上搜索包含该字符的命令，继续按Ctrl+r，搜索上一条匹配的命令Ctrl+s 与Ctrl+r类似,只是正向检索Ctrl+f 光标向前移动一个字符,相当与-&gt;Ctrl+b 光标向后移动一个字符,相当与&lt;-opt+&lt;- 光标向前移动一个单词opt+-&gt; 光标向后移动一个单词ls !$ 执行命令ls，并以上一条命令的参数为其参数Ctrl+a 移动到当前行的开头Ctrl+e 移动到当前行的结尾Esc+b 移动到当前单词的开头Esc+f 移动到当前单词的结尾Ctrl+l 清屏Ctrl+u 剪切命令行中光标所在处之前的所有字符（不包括自身）Ctrl+k 剪切命令行中光标所在处之后的所有字符（包括自身）Ctrl+d 删除光标所在处字符Ctrl+h 删除光标所在处前一个字符Ctrl+y 粘贴刚才所删除的字符Ctrl+w 剪切光标所在处之前的一个词（以空格、标点等为分隔符）Ctrl+t 颠倒光标所在处及其之前的字符位置，并将光标移动到下一个字符Ctrl+v 插入特殊字符,如Ctrl+v+Tab加入Tab字符键Esc+t 颠倒光标所在处及其相邻单词的位置Ctrl+c 删除整行Ctrl+(x u) 按住Ctrl的同时再先后按x和u，撤销刚才的操作Ctrl+s 挂起当前shellCtrl+q 重新启用挂起的shell 下面的应用可能稍稍高级一点点!! - 上一条命令!-n - 倒数第N条历史命令!-n:p - 打印上一条命令（不执行）!?string？- 最新一条含有“string”的命令!-n:gs/str1/str2/ - 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个）","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-09T06:21:21.743Z","updated":"2018-03-10T20:55:40.927Z","comments":true,"path":"2018/03/08/hello-world/","link":"","permalink":"http://yoursite.com/2018/03/08/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}